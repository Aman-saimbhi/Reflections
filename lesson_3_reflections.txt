1)When would you want to use a remote repository rather than keeping all your work
local?

    Remote repository is useful when we want to make our repository public to everyone
    it is useful when there are number of people working on the same project
    and everyone needs to push their changes in the main version.

2)Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    we might want to pull the changes in the repository , because maybe i am working on
    some different thing and for any reason i dont want the commit which is pushed
    by some another person in my repository in these types of cases
    manual pull is required.

3)Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    forks are used when we want to clone a repository from GitHub to your GitHub
    clone is the copying of one repository to your local repository.
    branches are used when we want to use the master branch and add some
    additional feature for some another purpose.

4)What is the benefit of having a copy of the last known state of the remote
stored locally?

    the benefit is that if we will have the copy we can know that whether
    we are ahead of the intitial state so that we can merge further after
    updating the location of origin/master.

5)How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    the one way I can think of collaborating without github is using mail,
    and sending entire code fragments , which is very difficult and time
    consuming and highly unorganised. the only benefit of using that will
    be that you dont have to be familiar with git to use this.

6)When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    we would want to make separate branch for something when we want
    some feedback on the additional code before adding it to the master
    branch. this approach results less bugs and errors in main master branch.
