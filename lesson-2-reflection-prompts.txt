1) What happens when you initialize a repository? Why do you need to do it?

   when we initialize a repository it creats an empty repository with no
   commits present in it , we need to do it so as we can make commits
   in the future.

2)How is the staging area different from the working directory and the repository?
  What value do you think it offers?

   we add the files in the stagin area on which the commits take place
   the files which are in the staging area gets added in the repository.

3)How can you use the staging area to make sure you have one commit per logical
change?

   we can compare the staging area with the most recent commit in the repository
   with this we can assure that before commit we have only made one change.

4)What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

   when we dont want the linear chain , and we want to use the code sor something
   different which we need in some other case , we can make a branch of that version
   and comit the changes.

5)How do the diagrams help you visualize the branch structure?

   as by the diagram we can see the structure of the branches and can understand
   how the master branch is leading and other branches are formed from it.

6)What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  when we merge two branches all the commits by one branch
  are merged into the other branch , so this way we can access all the commits
  which are merged, we represent it in the diagram in a way that it looks
  clear that the commits from both the branches are now accessible by the merged master branch.

7)What are the pros and cons of Git's automatic merging vs. always doing merges manually?

   pros are that it saves a lot of time as git automatically runs the algorith
   and figure out what will be required in the final branch , the con is in the
   case of ambiguity , when there are two different versions of the same file in both the branches
   then git gets confused whether to take the version of which branch into the final
   merge , in that case we have to do the merge manually,by resolving the issue.
